"""
Script para criar um v√≠deo MP4 a partir de uma sequ√™ncia de imagens.

O script procura por imagens com sequencia numerica no mesmo diretorio que o .py
le elas de forma numericamente crescente e as compila em um
√∫nico arquivo de v√≠deo MP4 de qualidade customizavel.
"""
import re
from pathlib import Path
import imageio

# --- CONFIGURA√á√ïES ---
# Altere estas vari√°veis para ajustar o comportamento do script

# 1. Diret√≥rio onde as imagens est√£o localizadas, relativo √† pasta do script.
# 
#    O script espera ter a seguinte estrutura de arquivos:
#    - pasta onde esta o script/
#      - script.py
#      - imagens/
#        -imagem_01.jpeg
#        -imagem_02.jpeg...     
#
#    A linha abaixo constr√≥i o caminho para esse diret√≥rio imagens.
DIRETORIO_IMAGENS = Path(__file__).parent / 'Images'

# 2. Padr√£o do nome dos arquivos de imagem a serem procurados.
#    '*' encontrar√° qualquer arquivo de imagem n√£o coloque nem um outro tipo dentro de imagens.
PADRAO_ARQUIVO = '*'

# 3. Nome do arquivo de v√≠deo que ser√° gerado no mesmo diret√≥rio das imagens.
NOME_VIDEO_SAIDA = 'OUTPUT.mp4'

# 4. Taxa de quadros por segundo (FPS) do v√≠deo final.
FPS = 24

# 5. Par√¢metros de qualidade do v√≠deo (usando FFMPEG).
#    - codec: 'libx264' √© o padr√£o para H.264/MP4, √≥tima qualidade e compatibilidade.
#    - ffmpeg_params: ['-crf', '17']
#      'crf' (Constant Rate Factor) controla a qualidade. Valores mais baixos = melhor qualidade.
#      0 √© sem perdas, ~17-18 √© considerado visualmente sem perdas. 23 √© o padr√£o.
FFMPEG_PARAMS = ['-crf', '17']

# --- FIM DAS CONFIGURA√á√ïES ---


def extrair_numero(path_arquivo: Path) -> int:
    """
    Extrai o n√∫mero de um nome de arquivo para ordena√ß√£o correta.
    Ex: 'imagemlegal_12.png' -> 12
    Retorna 0 se nenhum n√∫mero for encontrado.
    """
    match = re.search(r'\d+', path_arquivo.name)
    if match:
        return int(match.group())
    return 0

def criar_video():
    """
    Fun√ß√£o principal que encontra as imagens, ordena e cria o v√≠deo MP4.
    """
    print("üé¨ Iniciando cria√ß√£o do v√≠deo MP4...")
    
    if not DIRETORIO_IMAGENS.is_dir():
        print(f"‚ùå Erro: O diret√≥rio de imagens n√£o foi encontrado!")
        print(f"   Caminho esperado: '{DIRETORIO_IMAGENS.resolve()}'")
        print(f"   Verifique se a estrutura de pastas est√° correta.")
        return

    print(f"üîé Procurando por imagens em: '{DIRETORIO_IMAGENS.resolve()}'")
    
    try:
        # Encontra todos os arquivos que correspondem ao padr√£o
        arquivos_imagem = list(DIRETORIO_IMAGENS.glob(PADRAO_ARQUIVO))
        
        # Filtra para garantir que estamos pegando apenas arquivos de imagem comuns
        extensoes_validas = ['.png', '.jpg', '.jpeg', '.bmp', '.tiff']
        arquivos_imagem = [f for f in arquivos_imagem if f.suffix.lower() in extensoes_validas]

        if not arquivos_imagem:
            print(f"‚ùå Erro: Nenhuma imagem encontrada com o padr√£o '{PADRAO_ARQUIVO}' no diret√≥rio especificado.")
            return

        # Ordena os arquivos numericamente
        arquivos_ordenados = sorted(arquivos_imagem, key=extrair_numero)

        print("\n‚úÖ Imagens encontradas e ordenadas:")
        for arq in arquivos_ordenados:
            print(f"  -> {arq.name}")

        caminho_saida = DIRETORIO_IMAGENS / NOME_VIDEO_SAIDA
        print(f"\n‚öôÔ∏è  Preparando para criar o v√≠deo em '{caminho_saida}'")
        print(f"    - FPS: {FPS}")
        print(f"    - Qualidade (CRF): {FFMPEG_PARAMS[1]}")

        # Usa um 'writer' para adicionar os frames um a um.
        # Isso √© mais eficiente em termos de mem√≥ria do que carregar todas as imagens de uma vez.
        with imageio.get_writer(caminho_saida, fps=FPS, codec='libx264', ffmpeg_params=FFMPEG_PARAMS) as writer:
            
            primeira_resolucao = None
            for i, caminho_imagem in enumerate(arquivos_ordenados):
                print(f"    -> Adicionando frame {i+1}/{len(arquivos_ordenados)}: {caminho_imagem.name}")
                try:
                    frame = imageio.imread(caminho_imagem)

                    # Define a resolu√ß√£o do v√≠deo com base na primeira imagem
                    if primeira_resolucao is None:
                        primeira_resolucao = frame.shape[:2]
                        print(f"    - Resolu√ß√£o do v√≠deo definida para: {frame.shape[1]}x{frame.shape[0]}")
                    
                    # Alerta se as resolu√ß√µes forem diferentes
                    if frame.shape[:2] != primeira_resolucao:
                        print(f"    ‚ö†Ô∏è  Aviso: A imagem '{caminho_imagem.name}' tem uma resolu√ß√£o diferente e ser√° redimensionada.")
                        # O FFMPEG geralmente lida com isso, mas o aviso √© importante.

                    writer.append_data(frame)
                except Exception as e:
                    print(f"    ‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel processar '{caminho_imagem.name}'. Pulando. Erro: {e}")
        
        print(f"\n‚ú® V√≠deo '{caminho_saida.name}' criado com sucesso!")

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro inesperado durante a cria√ß√£o do v√≠deo: {e}")

if __name__ == "__main__":
    criar_video()